1.创建空目录：
$ mkdir learngit
$ cd learngit
$ pwd 		//显示当前目录
/g/learngit

2.把目录设为Git可管理的仓库
$ git config --global core.autocrlf false //设置不自动转换LF与CRLF
$ git init	//初始化
Initialized empty Git repository in /g/learngit/.git/

3.把文件添加到仓库
$ git add readme.txt

$ git commit -m "wrote a readme file"
 [master (root-commit) b61a6d1] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt

 //-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
 //commit可以一次提交很多文件，所以你可以多次add不同的文件
 
 4.修改文件之后查看状态
 $ git status 
 On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   readme.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        GitComand

no changes added to commit (use "git add" and/or "git commit -a")

5.查看不同
$ git diff readme.txt
diff --git a/readme.txt b/readme.txt
index d8036c1..013b5bc 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.
\ No newline at end of file

//要随时掌握工作区的状态，使用git status命令。
//如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

6.查看历史记录
$ git log
commit 428911073c1538940a2f506524b25214d10e9fe4
Author: Name <Email>
Date:   Tue Nov 24 23:09:09 2015 +0800

    append GPL

commit 49f516192186d01458970b52e2bbbdb85366f7fa
Author: Name <Email>
Date:   Tue Nov 24 23:06:19 2015 +0800

    add distributed

commit b61a6d1029997b268c9e190427369d6b143635e1
Author: Name <Email>
Date:   Tue Nov 24 22:56:37 2015 +0800

    wrote a readme file

6.1信息格式
$ git log --pretty=oneline
428911073c1538940a2f506524b25214d10e9fe4 append GPL
49f516192186d01458970b52e2bbbdb85366f7fa add distributed
b61a6d1029997b268c9e190427369d6b143635e1 wrote a readme file

7.回退版本
$ git reset --hard HEAD^
HEAD is now at 49f5161 add distributed
//HEAD表示当前版本，HEAD^表示上一个版本，多的时候用HEAD~100

7.1查看文件
$ cat readme.txt

7.2前进版本
$  git reset --hard 428911073c
HEAD is now at 4289110 append GPL

7.3查看每一次命令
$ git reflog
4289110 HEAD@{0}: reset: moving to 428911073c
49f5161 HEAD@{1}: reset: moving to HEAD^
4289110 HEAD@{2}: commit: append GPL
49f5161 HEAD@{3}: commit: add distributed
b61a6d1 HEAD@{4}: commit (initial): wrote a readme file

//HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
//穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
//要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

8.名词
工作区
版本库
	.git
	stage	//暂存区
	master	//git自动创建的第一个分支
//git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。

9.git跟踪的是修改
	
10.撤销修改	//注意工作区与暂存区！！
$ git checkout -- readme.txt //可以撤销工作区的修改：
//命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
//一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
//一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

10.0 git log 条目过多时，按q退出

10.1撤销暂存区的修改
$ git reset HEAD file

//场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
//场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
//场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

11.删除文件
$ git rm file
$ git commit -m"remove file"	//删除版本库中的文件

11.1误删除找回
$ git checkout -- file //必须版本库中还未删除才能找回（回退

12.远程仓库
$ ssh-keygen -t rsa -C "email@example.com" 
//创建ssh key

13.添加远程库
//$ git remote add origin http://github.com/DumoeDss/Git.git  //使用http协议
$ git remote add origin git@github.com:DumoeDss/Git.git		//使用git协议
$ git push -u origin master
//要关联一个远程库，使用命令git remote add origin git@github.com:DumoeDss/Git.git；
//关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
//此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

14.从远程库克隆
git clone  git@github.com:DumoeDss/Git.git
//要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
//Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

15.创建分支
$ git branch //查看分支
$ git branch name	//创建分支
$ git checkout name		//切换分支
$ git checkout -b name 	//创建并切换分支
$ git  merge name 	//合并某分支到当前分支
$ git branch -d name 	//删除分支

16.在readme.md中添加图片
![image](https://github.com/DumoeDss/WinForm_2048/blob/master/Preview1.png)

17.解决冲突
$ git checkout -b feature1	//准备新的分支feature1
$ git add readme.txt	//修改并提交
$ git commit -m "add0"

$ git checkout master	//切换回master分支
$ git add readme.txt	//修改并提交
$ git commit -m "add1"

$ git merge feature1 //试图合并，会报错

$ git add readme.txt	//再次修改成和分支feature1的一样再提交
$ git commit -m "add2"

$ git log --graph --pretty=oneline --abbrev-commit	//查看分支的合并情况
$ git branch -d feature1	//删除feature1分支

18.分支管理策略	
//通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
//如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
$ git checkout -b dev	//创建dev分支
$ git add readme.txt	//修改并提交
$ git commit -m"add merge"

$ git checkout master 	//切换回master分支

$ git merge --no-ff -m "merge with no-ff" dev	//准备合并dev分支，--no-ff参数，表示禁用Fast forward：
//因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

$ git log --graph --pretty=oneline --abbrev-commit	//查了分支历史

//在实际开发中，我们应该按照几个基本原则进行分支管理：
//首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
//那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
//你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

19.Bug分支
//修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
//当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
$ git stash		//将当前工作现场存起来
$ git checkout master 	//切换到有bug的分支上
$ git checkout -b issue-101		//创建并跳到新分支
$ git add readme.txt	//修复bug并提交
$ git commit -m"fix bug 101"
$ git checkout master 	//切换回master分支
$ git merge --no-ff -m "merged bug fix 101" issue-101	//合并分支时，如果可能，Git会用Fast
$ git branch -d issue-101	//删除分支
$ git checkout dev 	//切换回之前工作的分支
$ git stash list	//查看之前保存的工作现场
$ git stash pop		//恢复并删除stash内容
// $ git stash apply 	//恢复，不删除stash内容。
// $ git stash drop		//删除stash内容
20.Feature分支
//开发一个新feature，最好新建一个分支；
//如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
$ git checkout -b feature-vulcan	//创建并跳转新分支
$ git add readme.txt	//修改并提交
$ git commit -m"add feature-vulcan"
$ git checkout dev	//切回dev分支
$ git branch -D feature-vulcan	//未合并，强行删除feature-vulcan分支

21.多人协作
$ git remote	//查看远程库的信息
$ git remote -v 	//显示更详细的信息
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)
//显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。

21.1推送分支
$ git push origin master
$ git push origin dev
//master分支是主分支，因此要时刻与远程同步；
//dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
//bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
//feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

21.2抓取分支
$ git clone git@github.com:michaelliao/learngit.git		//克隆远程库时，默认只能看到本地的master分支
$ git checkout -b dev origin/dev 	//要在dev分支上开发，就必须创建远程origin的dev分支到本地
//push时遇到错误
//error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'
//hint: Updates were rejected because the tip of your current branch is behind
//hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
//hint: before pushing again.
//hint: See the 'Note about fast-forwards' in 'git push --help' for details.
//推送失败，因为其他人的最新提交和你试图推送的提交有冲突，解决办法也很简单，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
$ git pull	//git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
$ git branch --set-upstream dev origin/dev	//再pull
$ git pull	//这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：

//因此，多人协作的工作模式通常是这样：
//1.首先，可以试图用git push origin branch-name推送自己的修改；
//2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
//3.如果合并有冲突，则解决冲突，并在本地提交；
//4.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
//5.如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

//查看远程库信息，使用git remote -v；
//本地新建的分支如果不推送到远程，对其他人就是不可见的；
//从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
//在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
//建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
//从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


22.创建标签
$ git branch 	//显示分支
$ git checkout master	//切换到要打标签的分支
$ git tag v1.0	//git tag <name>打标签
$ git tag 	//查看所有标签
//默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
//方法是找到历史提交的commit id，然后打上就可以了

$ git log --pretty=oneline --abbrev-commit
$ git tag v0.9 6224937
$ git show v0.9		//查看标签内容
$  git tag -a v0.1 -m "version 0.1 released" 3628164	//创建带有说明的标签，用-a指定标签名，-m指定说明文字
$ git tag -s v0.2 -m "signed version 0.2 released" fec145a	//可以通过-s用私钥签名一个标签
//签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错
//用PGP签名的标签是不可伪造的，因为可以验证PGP签名

23.操作标签
$ git tag -d v0.1	//删除标签
$ git push origin v1.0 	//推送标签
$ git push origin --tags	//推送所有标签
$ git tag -d v0.9	//删除本地标签
$ git push origin :refs/tags/v0.9	//推送远程，删除标签

24.自定义Git
$ git config --global color.ui true	//让git显示颜色

25.配置别名
$ git config --global alias.st status //把st作为status的别名
$ git config --global alias.unstage 'reset HEAD'
$ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

//配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。d
//每个仓库的Git配置文件都放在.git/config文件中：
//别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
//而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：
